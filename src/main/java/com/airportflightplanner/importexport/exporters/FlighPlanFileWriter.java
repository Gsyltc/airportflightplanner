/* @(#)FlighPlanWriter.java
 *
 * 2016 Goubaud Sylvain.
 *
 */
package com.airportflightplanner.importexport.exporters;

import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;

import javax.measure.unit.NonSI;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;

import com.airportflightplanner.common.api.flightplan.FlightPlanReader;
import com.airportflightplanner.common.slotsignal.AbstractSenderReceiver;
import com.airportflightplanner.common.slotsignal.Slot;
import com.airportflightplanner.common.slotsignal.TopicName;
import com.airportflightplanner.common.slotsignal.api.SlotAction;
import com.airportflightplanner.common.types.ArrivalType;
import com.airportflightplanner.common.types.DepartureType;
import com.airportflightplanner.common.types.FlightPlanInformationTypes;
import com.airportflightplanner.common.types.FlightType;
import com.airportflightplanner.common.types.StartDays;
import com.airportflightplanner.common.utils.properties.CommonProperties;
import com.airportflightplanner.common.utils.time.TimeUtils;
import com.airportflightplanner.importexport.importers.FlightPlanFileReader;

/**
 * @author Goubaud Sylvain
 *
 */
public class FlighPlanFileWriter extends AbstractSenderReceiver {
    /** The logger of this class. */
    private static final Log              LOGGER           = LogFactory.getLog(FlightPlanFileReader.class);

    /** */
    public static final DateTimeFormatter WRITER_FORMATTER = new DateTimeFormatterBuilder().appendHourOfDay(2).   //
            appendMinuteOfHour(2).toFormatter();

    /**
     * @param flightPlan
     *
     */
    protected void writeFlightPlans(final FlightPlanReader flightPlan) {
        if (null != flightPlan) {
            String flightPlanFileName = flightPlan.getDepartureAirport() + "/" + flightPlan.getStartTime().toString(WRITER_FORMATTER) + "_" + //
                    flightPlan.getDepartureAirport() + "TEST_" + flightPlan.getArrivalAirport() + "_" + //
                    flightPlan.getAircraftType() + ".txt";

            Path fileName = CommonProperties.ROUTES_DIRECTORY.resolve(flightPlanFileName);

            try (FileWriter fileWriter = new FileWriter(fileName.toFile())) {

                fileWriter.write("THIS FILE WAS GENERATED BY THE AIRPORT FLIGHT PLANNER - GOUBAUD Sylvain - 2016");
                fileWriter.write(System.lineSeparator());
                fileWriter.write(System.lineSeparator());

                // STARTTIME
                fileWriter.write(FlightPlanInformationTypes.STARTTIME.name());
                fileWriter.write(System.lineSeparator());
                fileWriter.write(flightPlan.getStartTime().toString(TimeUtils.TIME_DISPLAYER));
                fileWriter.write(System.lineSeparator());
                fileWriter.write(FlightPlanInformationTypes.ENDSTARTTIME.name());
                fileWriter.write(System.lineSeparator());
                fileWriter.write(System.lineSeparator());

                // STARTAIRCRAFT
                fileWriter.write(FlightPlanInformationTypes.STARTAIRCRAFT.name());
                fileWriter.write(System.lineSeparator());
                fileWriter.write(flightPlan.getAircraftType());
                fileWriter.write(System.lineSeparator());
                fileWriter.write(FlightPlanInformationTypes.ENDAIRCRAFT.name());
                fileWriter.write(System.lineSeparator());
                fileWriter.write(System.lineSeparator());

                // STARTDEPAIRPORT
                fileWriter.write(FlightPlanInformationTypes.STARTDEPAIRPORT.name());
                fileWriter.write(System.lineSeparator());
                fileWriter.write(flightPlan.getDepartureAirport());
                fileWriter.write(System.lineSeparator());
                fileWriter.write(FlightPlanInformationTypes.ENDDEPAIRPORT.name());
                fileWriter.write(System.lineSeparator());
                fileWriter.write(System.lineSeparator());

                // STARTDESTAIRPORT
                fileWriter.write(FlightPlanInformationTypes.STARTDESTAIRPORT.name());
                fileWriter.write(System.lineSeparator());
                fileWriter.write(flightPlan.getArrivalAirport());
                fileWriter.write(System.lineSeparator());
                fileWriter.write(FlightPlanInformationTypes.ENDDESTAIRPORT.name());
                fileWriter.write(System.lineSeparator());
                fileWriter.write(System.lineSeparator());

                // STARTCALLSIGN
                if ((null != flightPlan.getCallSign()) && !flightPlan.getCallSign().isEmpty()) {
                    fileWriter.write(FlightPlanInformationTypes.STARTCALLSIGN.name());
                    fileWriter.write(System.lineSeparator());
                    fileWriter.write(flightPlan.getCallSign());
                    fileWriter.write(System.lineSeparator());
                    fileWriter.write(FlightPlanInformationTypes.ENDCALLSIGN.name());
                    fileWriter.write(System.lineSeparator());
                    fileWriter.write(System.lineSeparator());
                }

                // STARTDAYS
                if (!flightPlan.getStartDays().isEmpty()) {
                    fileWriter.write(FlightPlanInformationTypes.STARTDAYS.name());
                    fileWriter.write(System.lineSeparator());
                    for (StartDays day : flightPlan.getStartDays()) {
                        fileWriter.write(StartDays.getIndex(day) + " ");
                    }
                    fileWriter.write(System.lineSeparator());
                    fileWriter.write(FlightPlanInformationTypes.ENDDAYS.name());
                    fileWriter.write(System.lineSeparator());
                    fileWriter.write(System.lineSeparator());
                }

                // STARTSTEERPOINTS
                fileWriter.write(FlightPlanInformationTypes.STARTSTEERPOINTS.name());
                fileWriter.write(System.lineSeparator());
                for (String steerPoint : flightPlan.getSteerPoints()) {
                    fileWriter.write(steerPoint);
                    fileWriter.write(System.lineSeparator());
                }
                fileWriter.write(FlightPlanInformationTypes.ENDSTEERPOINTS.name());
                fileWriter.write(System.lineSeparator());
                fileWriter.write(System.lineSeparator());

                // START_FLY_TO_COMPLETION
                if (null != flightPlan.isFlightToCompletion()) {
                    fileWriter.write(FlightPlanInformationTypes.START_FLY_TO_COMPLETION.name());
                    fileWriter.write(System.lineSeparator());
                    fileWriter.write(flightPlan.isFlightToCompletion() ? "1" : "0");
                    fileWriter.write(System.lineSeparator());
                    fileWriter.write(FlightPlanInformationTypes.END_FLY_TO_COMPLETION.name());
                    fileWriter.write(System.lineSeparator());
                    fileWriter.write(System.lineSeparator());
                }

                // START_LANDING_LIGHT_ALT
                if (null != flightPlan.getLandingLightAltitude()) {
                    fileWriter.write(FlightPlanInformationTypes.START_LANDING_LIGHT_ALT.name());
                    fileWriter.write(System.lineSeparator());
                    fileWriter.write(String.valueOf((int) flightPlan.getLandingLightAltitude().doubleValue(NonSI.FOOT)));
                    fileWriter.write(System.lineSeparator());
                    fileWriter.write(FlightPlanInformationTypes.END_LANDING_LIGHT_ALT.name());
                    fileWriter.write(System.lineSeparator());
                    fileWriter.write(System.lineSeparator());
                }

                // STARTALTERNATEAIRPORT
                if ((null != flightPlan.getAlternateAirport()) && !flightPlan.getAlternateAirport().isEmpty()) {
                    fileWriter.write(FlightPlanInformationTypes.STARTALTERNATEAIRPORT.name());
                    fileWriter.write(System.lineSeparator());
                    fileWriter.write(flightPlan.getAlternateAirport());
                    fileWriter.write(System.lineSeparator());
                    fileWriter.write(FlightPlanInformationTypes.ENDALTERNATEAIRPORT.name());
                    fileWriter.write(System.lineSeparator());
                    fileWriter.write(System.lineSeparator());
                }

                // STARTARRIVETYPE
                if (null != flightPlan.getArrivalType()) {
                    fileWriter.write(FlightPlanInformationTypes.STARTARRIVETYPE.name());
                    fileWriter.write(System.lineSeparator());
                    fileWriter.write(String.valueOf(ArrivalType.getIndex(flightPlan.getArrivalType())));
                    fileWriter.write(System.lineSeparator());
                    fileWriter.write(FlightPlanInformationTypes.ENDARRIVETYPE.name());
                    fileWriter.write(System.lineSeparator());
                    fileWriter.write(System.lineSeparator());
                }

                // STARTDEPARTTYPE
                if (null != flightPlan.getDepartureType()) {
                    fileWriter.write(FlightPlanInformationTypes.STARTDEPARTTYPE.name());
                    fileWriter.write(System.lineSeparator());
                    fileWriter.write(String.valueOf(DepartureType.getIndex(flightPlan.getDepartureType())));
                    fileWriter.write(System.lineSeparator());
                    fileWriter.write(FlightPlanInformationTypes.ENDDEPARTTYPE.name());
                    fileWriter.write(System.lineSeparator());
                    fileWriter.write(System.lineSeparator());
                }

                // STARTFLIGHTTYPE
                if (null != flightPlan.getFlightType()) {
                    fileWriter.write(FlightPlanInformationTypes.STARTFLIGHTTYPE.name());
                    fileWriter.write(System.lineSeparator());
                    fileWriter.write(String.valueOf(FlightType.getIndex(flightPlan.getFlightType())));
                    fileWriter.write(System.lineSeparator());
                    fileWriter.write(FlightPlanInformationTypes.ENDFLIGHTTYPE.name());
                    fileWriter.write(System.lineSeparator());
                    fileWriter.write(System.lineSeparator());
                }

            } catch (IOException e) {
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.error("Error while writing files", e);
                }
            }
        }
    }

    /**
     *
     * {@inheritDoc}
     */
    @Override
    public void attachSlotAction() {
        Slot<FlightPlanReader> airportSlot = new Slot<FlightPlanReader>(TopicName.WRITE_FLIGHT_PLAN, this);
        airportSlot.setSlotAction(new SlotAction<FlightPlanReader>() {
            /**
             *
             * {@inheritDoc}
             */
            @Override
            public void doAction(final FlightPlanReader object) {
                writeFlightPlans(object);

            }
        });

    }
}
